// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PO_Projekt.Data;

namespace PO_Projekt.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20220121135042_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PO_Projekt.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pfizer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Novartis"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Us Pharmacia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Paso"
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingDataId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingDataId = 0,
                            ShippingType = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderDate = new DateTime(2021, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingDataId = 1,
                            ShippingType = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            OrderDate = new DateTime(2021, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingDataId = 2,
                            ShippingType = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            OrderDate = new DateTime(2022, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingDataId = 2,
                            ShippingType = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrescriptionCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrescriptionCode = 13423,
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2022, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrescriptionCode = 13778,
                            StartDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2022, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrescriptionCode = 14523,
                            StartDate = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.PrescriptionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            PrescriptionId = 1
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductNameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductNameId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(2022, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(2022, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 1
                        },
                        new
                        {
                            Id = 3,
                            ExpirationDate = new DateTime(2022, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 1
                        },
                        new
                        {
                            Id = 4,
                            ExpirationDate = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 2
                        },
                        new
                        {
                            Id = 5,
                            ExpirationDate = new DateTime(2022, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 2
                        },
                        new
                        {
                            Id = 6,
                            ExpirationDate = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 2
                        },
                        new
                        {
                            Id = 7,
                            ExpirationDate = new DateTime(2022, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 2
                        },
                        new
                        {
                            Id = 8,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 3
                        },
                        new
                        {
                            Id = 9,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 3
                        },
                        new
                        {
                            Id = 10,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 3
                        },
                        new
                        {
                            Id = 11,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductNameId = 3
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.ProductForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ProductForms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tabletka"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Plaster"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Saszetka"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Syrop"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kapsułka"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Maść"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Opatrunek"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Inne"
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.ProductName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductFormId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresPrescription")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductFormId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Neurologia Psychiatria: nasenne przeciwlękowe przeciwdrgawkowe uspokajające zmniejsza napięcie mięśni",
                            ImageFilename = "xanax.jpg",
                            ManufacturerId = 1,
                            Name = "Xanax",
                            Price = 45.990000000000002,
                            ProductFormId = 1,
                            ProductTypeId = 8,
                            RequiresPrescription = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "Lek przeciwbólowy i przeciwgorączkowy, który jako substancję czynną zawiera paracetamol. Lek stosuje się w bólach różnego pochodzenia, zarówno głowy, zębów, mięśni jak i menstruacyjnych, kostno-stawowych czy nerwobólach.",
                            ImageFilename = "apap.jpg",
                            ManufacturerId = 3,
                            Name = "Apap",
                            Price = 6.9900000000000002,
                            ProductFormId = 1,
                            ProductTypeId = 6,
                            RequiresPrescription = false
                        },
                        new
                        {
                            Id = 3,
                            Description = "To wyrób medyczny, wielokrotnego użytku. Produkt może być stosowany jako opaska podtrzymująca opatrunki, uciskowa oraz usztywniająca okolice okołostawowe. Długość opaski po relaksacji wynosi nie mniej niż 1,5 m.",
                            ImageFilename = "opaska-elastyczna-tkana-z-zapinka.jpg",
                            ManufacturerId = 4,
                            Name = "Opaska elastyczna z zapinką",
                            Price = 3.9900000000000002,
                            ProductFormId = 7,
                            ProductTypeId = 1,
                            RequiresPrescription = false
                        },
                        new
                        {
                            Id = 4,
                            Description = "Ibuprom Max to lek przeciwbólowy, ale także stosuje się go w leczeniu stanu zapalnego. Lek również obniża gorączkę.",
                            ImageFilename = "",
                            ManufacturerId = 1,
                            Name = "Ibuprom Max, 400 mg, tabletki drażowane, 48 szt. (butelka)",
                            Price = 26.489999999999998,
                            ProductFormId = 1,
                            ProductTypeId = 8,
                            RequiresPrescription = false
                        },
                        new
                        {
                            Id = 5,
                            Description = "Produkt leczniczy Ibuprom działa przeciwbólowo, przeciwzapalnie i przeciwgorączkowo. Stosuje się go w bólach głowy, zębów, mięśniowych, okolicy lędźwiowo-krzyżowej, kostnych i stawowych oraz w bolesnym miesiączkowaniu oraz w gorączce.",
                            ImageFilename = "",
                            ManufacturerId = 2,
                            Name = "Ibuprom, 200 mg, tabletki powlekane, 10 szt.",
                            Price = 6.9900000000000002,
                            ProductFormId = 1,
                            ProductTypeId = 8,
                            RequiresPrescription = false
                        },
                        new
                        {
                            Id = 6,
                            Description = "To wyrób medyczny, z opatrunkiem do cięcia, który chroni przed zarazkami i zabrudzeniem. Utrzymuje skórę w czystości, nie powoduje uczuleń i nie przywiera do rany. Rozmiar: 1 m x 6 cm.",
                            ImageFilename = "plastry.png",
                            ManufacturerId = 3,
                            Name = "Plaster z opatrunkiem, tkaninowy, 1 m x 6 cm, 1 szt.",
                            Price = 5.9900000000000002,
                            ProductFormId = 2,
                            ProductTypeId = 9,
                            RequiresPrescription = false
                        },
                        new
                        {
                            Id = 7,
                            Description = "Kremowy szampon i płyn do kąpieli – w łagodny sposób myje oraz pielęgnuje skórę i włosy dziecka. Kosmetyk może być stosowany już od pierwszego dnia życia maluszka. Szampon w swoim składzie zawiera między innymi: bisabolol, który łagodzi podrażnienia.",
                            ImageFilename = "baby_care.png",
                            ManufacturerId = 4,
                            Name = "Pikabu Baby Care, kremowy szampon i płyn do kąpieli, 300 ml",
                            Price = 24.989999999999998,
                            ProductFormId = 8,
                            ProductTypeId = 7,
                            RequiresPrescription = false
                        },
                        new
                        {
                            Id = 8,
                            Description = "Fervex Junior to lek w postaci granulatu do sporządzania roztworu doustnego dla dzieci od 6 roku życia. Ma działanie przeciwbólowe i przeciwgorączkowe, udrażnia przewody nosowe, hamuje odruch kichania i łzawienie oczu, uzupełnia niedobory witaminy C.",
                            ImageFilename = "fervex.png",
                            ManufacturerId = 1,
                            Name = "Fervex Junior, granulat bez cukru, 8 saszetek",
                            Price = 19.190000000000001,
                            ProductFormId = 3,
                            ProductTypeId = 6,
                            RequiresPrescription = false
                        },
                        new
                        {
                            Id = 9,
                            Description = "Doustnie. Dawkę i częstotliwość przyjmowania preparatu ustala lekarz. Lek należy przyjąć jak najszybciej po wystąpieniu objawów migreny. Jeśli ból nie ustąpił dawkę można powtórzyć po upływie 2 godzin. Tabletki należy połykać w całości, popijając wodą.",
                            ImageFilename = "",
                            ManufacturerId = 3,
                            Name = "Sumatriptan Medical Valley, 50 mg, tabletki, 6 szt.",
                            Price = 25.59,
                            ProductFormId = 1,
                            ProductTypeId = 8,
                            RequiresPrescription = true
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            ImageFilename = "",
                            ManufacturerId = 4,
                            Name = "Cital, 20 mg, tabletki powlekane, 60 szt.",
                            Price = 36.990000000000002,
                            ProductFormId = 1,
                            ProductTypeId = 8,
                            RequiresPrescription = true
                        },
                        new
                        {
                            Id = 11,
                            Description = "suplement diety w formie płynu, który uzupełnia codzienną dietę w magnez i witaminę B6. Produkt przeznaczony dla dzieci od 3 roku życia i osób dorosłych.",
                            ImageFilename = "syrop.png",
                            ManufacturerId = 3,
                            Name = "JuniorMag, płyn, smak truskawkowy, 120 ml",
                            Price = 13.99,
                            ProductFormId = 4,
                            ProductTypeId = 3,
                            RequiresPrescription = false
                        },
                        new
                        {
                            Id = 12,
                            Description = "InVag to produkt leczniczy zawierający bakterie kwasy mlekowego, które przywracają równowagę pH pochwy do stosowania w zaburzeń mikroflory spowodowanej m.in. stosowaniem antybiotyków czy zmianami hormonalnymi.",
                            ImageFilename = "p_antybiotyk.png",
                            ManufacturerId = 2,
                            Name = "InVag, kapsułki twarde, dopochwowe, 7 szt.",
                            Price = 34.990000000000002,
                            ProductFormId = 1,
                            ProductTypeId = 5,
                            RequiresPrescription = true
                        },
                        new
                        {
                            Id = 13,
                            Description = "Tribiotic to produkt leczniczy zawierający 3 antybiotyki, które wykazują działanie przeciwbakteryjne. Lek do stosowania w przypadku zadrapań, ran, oparzeń.",
                            ImageFilename = "m_antybiotyk.png",
                            ManufacturerId = 4,
                            Name = "Tribiotic",
                            Price = 16.59,
                            ProductFormId = 6,
                            ProductTypeId = 5,
                            RequiresPrescription = true
                        },
                        new
                        {
                            Id = 14,
                            Description = "Polibiotic to produkt leczniczy zawierający 3 antybiotyki działające w przypadku zakażeń skórnych, maść do stosowania w przypadku ran, owrzodzeń i oparzeń.",
                            ImageFilename = "m_antybiotyk_2.png",
                            ManufacturerId = 1,
                            Name = "Polibiotic, (5 mg+5000 j.m.+400 j.m.g), maść, 15 g (tuba)",
                            Price = 11.890000000000001,
                            ProductFormId = 6,
                            ProductTypeId = 5,
                            RequiresPrescription = true
                        },
                        new
                        {
                            Id = 15,
                            Description = "suplement diety wspomagający układ odpornościowy. Produkt przeznaczony dla osób dorosłych.",
                            ImageFilename = "witamina_c.png",
                            ManufacturerId = 2,
                            Name = "Witamina C 1000 mg Forte, tabletki do ssania, smak pomarańczowy, 60 szt.",
                            Price = 14.99,
                            ProductFormId = 1,
                            ProductTypeId = 3,
                            RequiresPrescription = false
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 4,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 3,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "sprzęt medyczny"
                        },
                        new
                        {
                            Id = 2,
                            Name = "kosmetyki"
                        },
                        new
                        {
                            Id = 3,
                            Name = "suplementy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "przeciwbólowe"
                        },
                        new
                        {
                            Id = 5,
                            Name = "antybiotyki"
                        },
                        new
                        {
                            Id = 6,
                            Name = "przeziębienie"
                        },
                        new
                        {
                            Id = 7,
                            Name = "dziecko"
                        },
                        new
                        {
                            Id = 8,
                            Name = "leki"
                        },
                        new
                        {
                            Id = 9,
                            Name = "inne"
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.ShippingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HomeNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("LocalNumber")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("PostalNumber")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Wrocław",
                            HomeNumber = "23",
                            LocalNumber = "1",
                            PostalNumber = 50243,
                            Street = "Fiołkowa",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Wrocław",
                            HomeNumber = "2",
                            PostalNumber = 50243,
                            Street = "Nizinna",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            City = "Kraków",
                            HomeNumber = "29",
                            LocalNumber = "4",
                            PostalNumber = 51753,
                            Street = "Łańcuchowa",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            City = "Warszawa",
                            HomeNumber = "145",
                            LocalNumber = "10",
                            PostalNumber = 60321,
                            Street = "Długa",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2000, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ania.haha@gmail.com",
                            Password = "tajnehaslo"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1990, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "korneliusz.smigly@op.pl",
                            Password = "supertajne"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1986, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sowa.minerwa@o2.pl",
                            Password = "illuminati"
                        });
                });

            modelBuilder.Entity("PO_Projekt.Models.Prescription", b =>
                {
                    b.HasOne("PO_Projekt.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PO_Projekt.Models.PrescriptionOrder", b =>
                {
                    b.HasOne("PO_Projekt.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PO_Projekt.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("PO_Projekt.Models.Product", b =>
                {
                    b.HasOne("PO_Projekt.Models.ProductName", "ProductName")
                        .WithMany()
                        .HasForeignKey("ProductNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductName");
                });

            modelBuilder.Entity("PO_Projekt.Models.ProductName", b =>
                {
                    b.HasOne("PO_Projekt.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PO_Projekt.Models.ProductForm", "ProductForm")
                        .WithMany()
                        .HasForeignKey("ProductFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PO_Projekt.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("ProductForm");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("PO_Projekt.Models.ShippingData", b =>
                {
                    b.HasOne("PO_Projekt.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
